service: projects

package:
  # Pack each function individually
  individually: true
  # At first serverless will apply the globs defined in exclude. After that it'll add all the globs from include.
  exclude:
    - ./**
    - '!package.json'
    # - '!dist/**'
    - '!node_modules/**'
  # You can always re-include previously excluded files and directories.  
  include:
    # General
    - "!{../../,}{**/,}.DS_Store"
    - "!{../,}{**/,}.vscode/**"
    # Dependencies
    - "!{../../,}{**/,}node_modules/aws-sdk/**"
    - "!{../../,}{**/,}node_modules/{@*/*,*}/CHANGELOG.md"
    - "!{../../,}{**/,}node_modules/{@*/*,*}/README.md"

plugins:
  - serverless-jetpack
  - serverless-offline
  - serverless-offline-scheduler

custom:
  jetpack:
    base: "../.." # Search for hoisted dependencies to one parent above normal.
  projectName: serverless_projects # Project name under the services will be defined in
  stage: ${{opt:stage, self:provider.stage}}
  region: ${{opt:region, self:provider.region}}

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless-admin
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here (e.g. utility functions or directories)
#package:
include:
  - utils/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: dist/handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: message/{name}
          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello
  # cron_job:
  #   handler: handler.cron_job
  #   events:
  #     - schedule: rate(1 minute)

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
